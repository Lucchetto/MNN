#version 450 core
layout(std430) buffer;

layout(set=0, binding=0) uniform mediump sampler2D uInput;
layout(set=0, binding=1) writeonly restrict mediump uniform image2D uOutput;

layout(set = 0, binding = 2) uniform reluBuffer{
    ivec4 inImgSize;
    ivec4 outImgSize;
    vec4 scale;
}uResizeParam;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() {
    ivec2 outTexel = ivec2(gl_GlobalInvocationID.xy);

    if (outTexel.x >= uResizeParam.outImgSize.x || outTexel.y >= uResizeParam.outImgSize.y) {
        return;
    }

    vec2 texCoord = (vec2(outTexel) + 0.5) / vec2(uResizeParam.outImgSize.xy);
    vec2 texelSize = 1.0 / vec2(uResizeParam.inImgSize.xy);

    // Calculate the four texels that surround the desired texel
    vec2 texelFloor = floor(texCoord * vec2(uResizeParam.inImgSize.xy));
    vec2 texelFraction = fract(texCoord * vec2(uResizeParam.inImgSize.xy));

    vec4 texel00 = texture(uInput, (texelFloor + vec2(0.0, 0.0)) * texelSize);
    vec4 texel10 = texture(uInput, (texelFloor + vec2(1.0, 0.0)) * texelSize);
    vec4 texel01 = texture(uInput, (texelFloor + vec2(0.0, 1.0)) * texelSize);
    vec4 texel11 = texture(uInput, (texelFloor + vec2(1.0, 1.0)) * texelSize);

    // Bilinear interpolation
    vec4 interpolatedColor = mix(
        mix(texel00, texel10, texelFraction.x),
        mix(texel01, texel11, texelFraction.x),
        texelFraction.y
    );

    // Write the interpolated color to the output image
    imageStore(uOutput, outTexel, interpolatedColor);
}
